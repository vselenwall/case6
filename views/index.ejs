<!DOCTYPE html>
<html lang="sv">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calendar App</title>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
        integrity="sha512-Fo3rlrZj/k7ujTnHg4CGR2D7kSs0v4LLanw2qksYuRlEzO+tcaEPQogQ0KaoGN26/zrn20ImR1DfuLWnOo7aBA=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />

    <link rel="stylesheet" href="/styles/style.css">

</head>

<body>

    <%- include('partials/header.ejs') %>

    <main>

        <div class="week-section">

            <div class="week-header">
                <div id="previous"><i class="fa-solid fa-angle-left"></i></div>
                <h3>Week</h3>
                <div id="next"><i class="fa-solid fa-angle-right"></i></div>
            </div>

            <div class="weekdays">
                <div class="mon">M
                </div>
                <div class="tue">T
                </div>
                <div class="wed">W
                </div>
                <div class="thurs">T
                </div>
                <div class="fri">F
                </div>
                <div class="sat">S
                </div>
                <div class="sun">S
                </div>
            </div>
            <div id="calendar-dates"></div>
        </div>



        <div class="overlay">
            <div id="event-creator">
                <form action="/index" method="post">
                    <label for="title">Title</label><br>
                    <input type="text" id="title" name="title" required><br>

                    <label for="date">Date</label>
                    <input type="date" id="date" name="date" value="2022-05-31" min="2022-01-01" max="2022-12-31">
                    <!--<label for="date">Date</label>
                    <select id="date" name="date">
                        <option value="2 may">2 may</option>
                        <option value="3 may">3 may</option>
                        <option value="4 may">4 may</option>
                        <option value="5 may">5 may</option>
                        <option value="6 may">6 may</option>
                        <option value="7 may">7 may</option>
                        <option value="8 may">8 may</option>
                    </select>-->
                    <br><br><input type="submit" id="addEvent" class="event-button" value="Create event">
                </form>
            </div>
        </div>


        <div id="eventBox"></div>
        <br>

        
        

        <ul>
            
            <button id="show-all">Show all events</button>
            
            <% locals.events.forEach(element => { %>
            <li id="list">
                <div id="element-date">
                    <%= element.date %>
                </div>
                <div class="element-title">
                    <p>
                        <%= element.title %>
                    </p>
                </div>
                <button class="edit" data-id="<%= element.id %>" id="<%= element.id %>"><i
                        class="fa-solid fa-pen"></i></button>
                <button class="remove" onclick="deleteEvent(<%= element.id %>)"><i
                        class="fa-solid fa-circle-minus"></i></button>
            </li>
            <% }) %>
        </ul>

  

        <!--<ul id="calendar"> </ul>-->

        <!-- <div id="testing"></div>-->

        

    </main>

    <%- include('partials/footer.ejs') %>

    <div id="overlay-bg"></div>

    <script>



    // DELETE EVENT 

    async function deleteEvent(id) {
        const response = await fetch(`/events/${id}`, {
            method: "delete"
        });
        if (response.redirected) {
            window.location.href = response.url;
        }
    }

    // EDIT EVENT

    async function editEvent(event) {

        const container = event.target.parentElement;
        const id = container.querySelector(".edit").getAttribute("data-id");
        const title = container.querySelector(".element-title");
        const date = container.querySelector("#element-date");

        // Make content editable
        if (!title.isContentEditable && !date.isContentEditable) {
            title.contentEditable = true;
            date.contentEditable = true;

            // Save changes with checkmark button
            event.target.innerHTML = '<i class="fa-solid fa-check"></i>';
        } else {

            // Save new quote w innertext
            const newEvent = {
                title: title.innerText,
                date: date.innerText
            };

            const response = await fetch(`/events/${id}`, {
                method: "put",
                body: JSON.stringify(newEvent),
                headers: {
                    "Content-Type": "application/json",
                },
            });

            // Redirect
            if (response.redirected) {
                window.location.href = response.url;
            }
        }
    }

    // Onclick edit event
    document.querySelectorAll(".edit").forEach((btn) => (btn.onclick = editEvent));

    // Show menu in header - add events
    function showMenu() {
        const menu = document.getElementById("event-creator");
        const menuBg = document.getElementById("overlay-bg");

        if (menu.style.display === "none") {
            menu.style.display = "block";
            menuBg.style.display = "block";
        } else {
            menu.style.display = "none";
            menuBg.style.display = "none";
        }

    }

    /* const datum = document.getElementsByClassName("element-date");

     document.getElementById("testing").innerHTML = datum.filter(testFunction);

     function testFunction(datum) {
         return datum = "2022-05-02";
     } */

    // DATES

    let date = new Date();

    // Add day
    date.setDate(date.getDate() - 7);
    let yearMonthDay = date.toLocaleDateString();

    // Weekday
    let weekday = date.getDay();
    console.log("it's this day: ", weekday);

    // Johannna
    let savedEvents = [];
    // placera härunder - veckans datum
    //let calendarDates = getWeekDates(date);
    let calendarDay = createDates(date);

    fetch("index/api", {
            method: "GET"
        })
        .then(function (response) {
            return response.json();
        })
        .then(function (events) {
            //console.log("data", events);
            savedEvents = events;
            // PLACERA IN EGEN
            //showWeekDates(calendarDates);
            showDates(calendarDay);
        })


    function createDates(date) {
        let day = new Date(date);
        let weekday = day.getDay();
        let daysBefore = -weekday;
        let daysAfter = 7 + daysBefore;
        let dates = [];
        day.setDate(day.getDate() + daysBefore);

        for (let i = daysBefore; i < daysAfter; i++) {
            day.setDate(day.getDate() + 1);
            let yearMonthDay = day.toLocaleDateString();
            //let dd = day.getUTCDate();
            //let testDay = d.getDay();
            let obj = {
                date: yearMonthDay,
                dd: day.getUTCDate()
            }

            dates.push(obj);
        }

        return dates;
    }

    // SHOW DATES  

    let calendar = createDates(date);
    console.log("calendar", calendar);

    const calendarDates = document.getElementById("calendar-dates")

    calendarDates.addEventListener("click", (event) => {
        //console.log(event.target.getAttribute("data-date"));

        // Div w dates in eventlist 
        let elementDate = document.getElementById("element-date")

        // Div w dates in calendar
        let dataDate = event.target.getAttribute("data-date")

        console.log("element-date: ", elementDate.innerText);

        console.log("dataDate: ", dataDate);

        let li = document.getElementById("list");

        savedEvents.events.forEach(events => {

            let result = savedEvents.events.filter((e) => {
                return e.date === dataDate;
            });

            li.classList.add("remove-this");

            if(result) {
                li.classList.add("save");
            } 
            

            console.log(result);

        });

        let showAll = document.getElementById("show-all");
        showAll.addEventListener("click", showAllEvents)

        function showAllEvents() {
            let li = document.getElementById("list");
            /*li.classList.add("show-all");
            console.log("Show all");*/

            li.classList.remove("remove-this");
            
        };

        // if elementDate = dataDate filter from eventlist
        /*if (elementDate.innerText == dataDate) {


            let elementDateTwo = elementDate.innerText;

            /*let result = savedEvents.events.filter(function (events) {
                return events.id;
            });

            console.log("Events: ", savedEvents);

            const result = savedEvents.events.filter(
            (events) => events.date.includes(dataDate[1]));

            //showDates(result);

            // ANDERS
              console.log(savedEvents.events);
            let result = savedEvents.events.filter((e) => {
                return e.date === element;
            });

            console.log("Rätt: ", result);

            //console.log(elementDateTwo);

            //return elementDateTwo;

            //console.log("Rätt: ", result);


        } else {
            console.log("Funkar ej");
        }

    }) */ });

    //let dataDate = getAttribute("data-date")
    //console.log("skriv ut datum", dataDate);

    function showDates(dates) {

        calendarDates.innerText = "";

        dates.forEach(element => {

            let div = document.createElement("div");
            div.classList.add("date-element");
            div.setAttribute("data-date", element.date);


            // EVENTINFO
            /* const eventInfo = document.createElement("info-div");
            eventInfo.classList.add("event-info"); */

            // .date
            div.innerText = element.date;
            calendarDates.appendChild(div);

            // SKAPA

            /* const buttonsDiv = document.createElement("div");

            const editBtn = document.createElement("edit-btn");

            editBtn.innerHTML = "Edit"; */

            // FINNS INTE
           // buttonsDiv.appendChild(editBtn);

            //div = document.createElement("div");

            //match saved events
          
            //console.log(result);

            /*if (result.length > 0) {
                eventInfo.innerText = result[0].title;
                eventInfo.appendChild(buttonsDiv);
            }

            div.appendChild(eventInfo);
            calendarDates.appendChild(div); */


        });
    }

    /*let locals = './data/db.json';

    let result = locals.events.filter((element) => {
            return element.date === element;
        });
        console.log(result); */

    // NAVIGATION

    const previous = document.getElementById("previous");
    const next = document.getElementById("next");

    previous.addEventListener("click", () => {
        console.log("Gå bakåt");

        let firstWeekday = document.querySelector(".date-element");
        console.log("firstWeekday", firstWeekday);

        let thisMonday = firstWeekday.innerText;
        console.log("currentMonday", thisMonday);

        let day = new Date(thisMonday);

        day.setDate(day.getDate() - 7);
        console.log("day...", day);

        // TAGIT HÄRIFRÅN
        calendar = createDates(day);
        console.log("calendarDates", calendar);
        showDates(calendar);
    });

    next.addEventListener("click", () => {
        console.log("Gå framåt");

        // check first day now
        let firstWeekday = document.querySelector(".date-element");
        console.log("firstWeekday", firstWeekday);

        let thisMonday = firstWeekday.innerText;
        console.log("thisMonday", thisMonday);

        // en vecka tidigare... 
        // skapa först ett äkta datumobjekt av currentMonday 
        let day = new Date(thisMonday);
        // en vecka tidigare 
        day.setDate(day.getDate() + 7);
        console.log("day...", day);
        // ändra innehållet i ul elementet 
        // hämta först veckans datum 
        calendar = createDates(day);
        console.log("calendarDates", calendar);
        showDates(calendar);
    });


    </script>


</body>

</html>